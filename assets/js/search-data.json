{
  
    
        "post0": {
            "title": "Simply Stepwise and Weighted Regression",
            "content": "import pandas as pd import numpy as np import matplotlib.pyplot as plt from sklearn.linear_model import Ridge from sklearn.linear_model import Lasso import statsmodels.api as sm import pylab as py from sklearn import linear_model from sklearn.linear_model import LinearRegression import statsmodels.api as sm . url = &quot;Car/toyota.csv&quot; data = pd.read_csv(url) data.head() . model year price transmission mileage fuelType tax mpg engineSize . 0 GT86 | 2016 | 16000 | Manual | 24089 | Petrol | 265 | 36.2 | 2.0 | . 1 GT86 | 2017 | 15995 | Manual | 18615 | Petrol | 145 | 36.2 | 2.0 | . 2 GT86 | 2015 | 13998 | Manual | 27469 | Petrol | 265 | 36.2 | 2.0 | . 3 GT86 | 2017 | 18998 | Manual | 14736 | Petrol | 150 | 36.2 | 2.0 | . 4 GT86 | 2017 | 17498 | Manual | 36284 | Petrol | 145 | 36.2 | 2.0 | . data.shape . (6738, 10) . Stepwise rewgression . num = [&#39;mileage&#39;, &#39;tax&#39;, &#39;mpg&#39;, &#39;engineSize&#39;] # num = [&#39;mileage&#39;, &#39;tax&#39;, &#39;mpg&#39;, &#39;engineSize&#39;, &#39;engineSize2&#39;] . num = [&#39;mileage&#39;, &#39;tax&#39;, &#39;mpg&#39;, &#39;engineSize&#39;] for i in range(0,len(num),1): x = pd.DataFrame(data[num[0:i+1]]) y = data[&#39;price&#39;] model = sm.OLS(y, x).fit() print(&quot;With predictor {}&quot;.format(num[0:i+1])) print(&quot;R-squared = &quot;, model.rsquared) print(&quot;Adj R-squared =&quot;, model.rsquared_adj) print(&quot;AIC =&quot;, model.aic) print(&quot;BIC =&quot;, model.bic) print(&quot; n&quot;) . With predictor [&#39;mileage&#39;] R-squared = 0.3573100248074934 Adj R-squared = 0.3572146277501693 AIC = 144834.10437945105 BIC = 144840.91989787502 With predictor [&#39;mileage&#39;, &#39;tax&#39;] R-squared = 0.6362397640051107 Adj R-squared = 0.6361317591844472 AIC = 141001.0537912962 BIC = 141014.68482814415 With predictor [&#39;mileage&#39;, &#39;tax&#39;, &#39;mpg&#39;] R-squared = 0.7965603667829384 Adj R-squared = 0.7964697477926412 AIC = 137087.42922847485 BIC = 137107.87578374674 With predictor [&#39;mileage&#39;, &#39;tax&#39;, &#39;mpg&#39;, &#39;engineSize&#39;] R-squared = 0.9423743984966928 Adj R-squared = 0.9423401688551702 AIC = 128590.10000072751 BIC = 128617.36207442338 . model.summary() . OLS Regression Results Dep. Variable: price | R-squared (uncentered): 0.942 | . Model: OLS | Adj. R-squared (uncentered): 0.942 | . Method: Least Squares | F-statistic: 2.753e+04 | . Date: Fri, 15 Apr 2022 | Prob (F-statistic): 0.00 | . Time: 11:16:33 | Log-Likelihood: -64291. | . No. Observations: 6738 | AIC: 1.286e+05 | . Df Residuals: 6734 | BIC: 1.286e+05 | . Df Model: 4 | | . Covariance Type: nonrobust | | . | coef std err t P&gt;|t| [0.025 0.975] . mileage -0.1522 | 0.002 | -68.454 | 0.000 | -0.157 | -0.148 | . tax -1.6673 | 0.562 | -2.967 | 0.003 | -2.769 | -0.566 | . mpg -1.7408 | 1.664 | -1.046 | 0.295 | -5.002 | 1.520 | . engineSize 1.112e+04 | 85.197 | 130.535 | 0.000 | 1.1e+04 | 1.13e+04 | . Omnibus: 2229.863 | Durbin-Watson: 0.914 | . Prob(Omnibus): 0.000 | Jarque-Bera (JB): 11951.306 | . Skew: 1.492 | Prob(JB): 0.00 | . Kurtosis: 8.802 | Cond. No. 6.18e+04 | . Notes:[1] R² is computed without centering (uncentered) since the model does not contain a constant.[2] Standard Errors assume that the covariance matrix of the errors is correctly specified.[3] The condition number is large, 6.18e+04. This might indicate that there arestrong multicollinearity or other numerical problems. Use &quot;RegscorePy&quot; . y_pred = model.predict(x) . from RegscorePy import * . formula https://online.stat.psu.edu/stat462/node/199/ . AIC . p = 4 y = y aic.aic(y, y_pred, p) # using RegscorePy . 109256.10676454737 . n=6738 P=4 n*np.log(model.ssr) - n*np.log(n) + 2*P # using formula . 109256.10676454735 . BIC . p = 4 y = y bic.bic(y, y_pred, p) # using RegscorePy . 109283.36883824323 . n=6738 P=4 n*np.log(model.ssr) - n*np.log(n) + P*np.log(n) # using formula . 109283.36883824322 . Weighted Regression . data[num] . mileage tax mpg engineSize engineSize2 . 0 24089 | 265 | 36.2 | 2.0 | 4.0 | . 1 18615 | 145 | 36.2 | 2.0 | 4.0 | . 2 27469 | 265 | 36.2 | 2.0 | 4.0 | . 3 14736 | 150 | 36.2 | 2.0 | 4.0 | . 4 36284 | 145 | 36.2 | 2.0 | 4.0 | . ... ... | ... | ... | ... | ... | . 6733 30000 | 20 | 58.9 | 1.0 | 3.0 | . 6734 36154 | 125 | 50.4 | 1.3 | 3.3 | . 6735 46000 | 125 | 57.6 | 1.4 | 3.4 | . 6736 60700 | 125 | 50.4 | 1.3 | 3.3 | . 6737 45128 | 125 | 50.4 | 1.3 | 3.3 | . 6738 rows × 5 columns . data.mpg.min() . 2.8 . data[num].sort_values(&#39;mpg&#39;).head(50) . mileage tax mpg engineSize engineSize2 . 6562 50 | 260 | 2.8 | 2.4 | 4.4 | . 6552 3350 | 260 | 2.8 | 2.4 | 4.4 | . 6594 1259 | 265 | 2.8 | 2.4 | 4.4 | . 6595 10250 | 260 | 2.8 | 2.4 | 4.4 | . 6617 150 | 260 | 2.8 | 2.4 | 4.4 | . 6575 7123 | 260 | 2.8 | 2.4 | 4.4 | . 6596 5000 | 260 | 2.8 | 2.4 | 4.4 | . 6563 100 | 260 | 2.8 | 2.4 | 4.4 | . 6583 4 | 265 | 2.8 | 2.4 | 4.4 | . 6576 5190 | 260 | 2.8 | 2.4 | 4.4 | . 5966 16429 | 145 | 6.0 | 1.2 | 3.2 | . 6694 100000 | 265 | 23.9 | 4.2 | 6.2 | . 6693 143000 | 325 | 27.2 | 3.0 | 5.0 | . 6698 60000 | 540 | 29.7 | 4.5 | 6.5 | . 6667 6254 | 145 | 30.1 | 2.8 | 4.8 | . 6680 789 | 145 | 30.1 | 2.8 | 4.8 | . 6677 22845 | 150 | 30.1 | 2.8 | 4.8 | . 6649 11712 | 145 | 30.1 | 2.8 | 4.8 | . 6657 10083 | 145 | 30.1 | 2.8 | 4.8 | . 6658 11619 | 145 | 30.1 | 2.8 | 4.8 | . 6682 3500 | 145 | 30.1 | 2.8 | 4.8 | . 6684 4 | 145 | 30.1 | 2.8 | 4.8 | . 6687 27 | 145 | 30.1 | 2.8 | 4.8 | . 6688 1244 | 145 | 30.1 | 2.8 | 4.8 | . 6689 4512 | 145 | 30.1 | 2.8 | 4.8 | . 6653 12543 | 145 | 30.1 | 2.8 | 4.8 | . 6695 4000 | 150 | 30.1 | 2.8 | 4.8 | . 6699 6836 | 145 | 30.1 | 2.8 | 4.8 | . 6651 200 | 150 | 30.1 | 2.8 | 4.8 | . 6675 15200 | 145 | 30.1 | 2.8 | 4.8 | . 6659 16634 | 145 | 30.1 | 2.8 | 4.8 | . 6672 3104 | 145 | 30.1 | 2.8 | 4.8 | . 6663 8967 | 150 | 30.1 | 2.8 | 4.8 | . 6666 11404 | 145 | 30.1 | 2.8 | 4.8 | . 6661 3390 | 145 | 30.1 | 2.8 | 4.8 | . 6670 1000 | 145 | 30.1 | 2.8 | 4.8 | . 6671 8813 | 145 | 30.1 | 2.8 | 4.8 | . 799 45229 | 330 | 30.4 | 2.0 | 4.0 | . 6409 44000 | 325 | 30.7 | 2.0 | 4.0 | . 6690 80750 | 325 | 31.0 | 3.0 | 5.0 | . 6696 113000 | 555 | 31.4 | 3.0 | 5.0 | . 761 61000 | 330 | 31.4 | 2.0 | 4.0 | . 6691 160000 | 325 | 31.4 | 3.0 | 5.0 | . 6686 174419 | 565 | 31.4 | 3.0 | 5.0 | . 785 116000 | 330 | 31.4 | 2.0 | 4.0 | . 776 140000 | 325 | 32.1 | 2.0 | 4.0 | . 763 113000 | 325 | 32.1 | 2.0 | 4.0 | . 6556 30848 | 260 | 32.8 | 3.0 | 5.0 | . 70 4000 | 145 | 32.8 | 2.0 | 4.0 | . 6629 92007 | 260 | 32.8 | 3.0 | 5.0 | . data[&quot;mpg_weighted&quot;] = data[&#39;mpg&#39;] - data.mpg.min() . data.sort_values(&#39;mpg&#39;).head(50) . model year price transmission mileage fuelType tax mpg engineSize engineSize2 mpg_weighted . 6562 Hilux | 2020 | 18495 | Manual | 50 | Diesel | 260 | 2.8 | 2.4 | 4.4 | 0.0 | . 6552 Hilux | 2019 | 28495 | Automatic | 3350 | Diesel | 260 | 2.8 | 2.4 | 4.4 | 0.0 | . 6594 Hilux | 2020 | 39257 | Automatic | 1259 | Diesel | 265 | 2.8 | 2.4 | 4.4 | 0.0 | . 6595 Hilux | 2019 | 27850 | Automatic | 10250 | Diesel | 260 | 2.8 | 2.4 | 4.4 | 0.0 | . 6617 Hilux | 2020 | 36995 | Automatic | 150 | Diesel | 260 | 2.8 | 2.4 | 4.4 | 0.0 | . 6575 Hilux | 2019 | 26500 | Automatic | 7123 | Diesel | 260 | 2.8 | 2.4 | 4.4 | 0.0 | . 6596 Hilux | 2020 | 30500 | Automatic | 5000 | Diesel | 260 | 2.8 | 2.4 | 4.4 | 0.0 | . 6563 Hilux | 2020 | 23495 | Manual | 100 | Diesel | 260 | 2.8 | 2.4 | 4.4 | 0.0 | . 6583 Hilux | 2019 | 26995 | Automatic | 4 | Diesel | 265 | 2.8 | 2.4 | 4.4 | 0.0 | . 6576 Hilux | 2019 | 20500 | Manual | 5190 | Diesel | 260 | 2.8 | 2.4 | 4.4 | 0.0 | . 5966 C-HR | 2018 | 16690 | Manual | 16429 | Petrol | 145 | 6.0 | 1.2 | 3.2 | 3.2 | . 6694 Land Cruiser | 1998 | 19990 | Manual | 100000 | Diesel | 265 | 23.9 | 4.2 | 6.2 | 21.1 | . 6693 Land Cruiser | 2004 | 6450 | Automatic | 143000 | Diesel | 325 | 27.2 | 3.0 | 5.0 | 24.4 | . 6698 Land Cruiser | 2014 | 44990 | Automatic | 60000 | Diesel | 540 | 29.7 | 4.5 | 6.5 | 26.9 | . 6667 Land Cruiser | 2019 | 50995 | Semi-Auto | 6254 | Diesel | 145 | 30.1 | 2.8 | 4.8 | 27.3 | . 6680 Land Cruiser | 2019 | 48995 | Automatic | 789 | Diesel | 145 | 30.1 | 2.8 | 4.8 | 27.3 | . 6677 Land Cruiser | 2019 | 42990 | Semi-Auto | 22845 | Diesel | 150 | 30.1 | 2.8 | 4.8 | 27.3 | . 6649 Land Cruiser | 2019 | 39498 | Semi-Auto | 11712 | Diesel | 145 | 30.1 | 2.8 | 4.8 | 27.3 | . 6657 Land Cruiser | 2019 | 42444 | Semi-Auto | 10083 | Diesel | 145 | 30.1 | 2.8 | 4.8 | 27.3 | . 6658 Land Cruiser | 2019 | 40999 | Semi-Auto | 11619 | Diesel | 145 | 30.1 | 2.8 | 4.8 | 27.3 | . 6682 Land Cruiser | 2020 | 50995 | Automatic | 3500 | Diesel | 145 | 30.1 | 2.8 | 4.8 | 27.3 | . 6684 Land Cruiser | 2020 | 47885 | Automatic | 4 | Diesel | 145 | 30.1 | 2.8 | 4.8 | 27.3 | . 6687 Land Cruiser | 2020 | 45950 | Automatic | 27 | Diesel | 145 | 30.1 | 2.8 | 4.8 | 27.3 | . 6688 Land Cruiser | 2020 | 52990 | Automatic | 1244 | Diesel | 145 | 30.1 | 2.8 | 4.8 | 27.3 | . 6689 Land Cruiser | 2019 | 44995 | Automatic | 4512 | Diesel | 145 | 30.1 | 2.8 | 4.8 | 27.3 | . 6653 Land Cruiser | 2019 | 39498 | Semi-Auto | 12543 | Diesel | 145 | 30.1 | 2.8 | 4.8 | 27.3 | . 6695 Land Cruiser | 2020 | 54550 | Automatic | 4000 | Diesel | 150 | 30.1 | 2.8 | 4.8 | 27.3 | . 6699 Land Cruiser | 2019 | 49995 | Automatic | 6836 | Diesel | 145 | 30.1 | 2.8 | 4.8 | 27.3 | . 6651 Land Cruiser | 2020 | 44995 | Semi-Auto | 200 | Diesel | 150 | 30.1 | 2.8 | 4.8 | 27.3 | . 6675 Land Cruiser | 2019 | 44935 | Semi-Auto | 15200 | Diesel | 145 | 30.1 | 2.8 | 4.8 | 27.3 | . 6659 Land Cruiser | 2019 | 42995 | Semi-Auto | 16634 | Diesel | 145 | 30.1 | 2.8 | 4.8 | 27.3 | . 6672 Land Cruiser | 2020 | 52291 | Semi-Auto | 3104 | Diesel | 145 | 30.1 | 2.8 | 4.8 | 27.3 | . 6663 Land Cruiser | 2019 | 45995 | Semi-Auto | 8967 | Diesel | 150 | 30.1 | 2.8 | 4.8 | 27.3 | . 6666 Land Cruiser | 2019 | 40995 | Semi-Auto | 11404 | Diesel | 145 | 30.1 | 2.8 | 4.8 | 27.3 | . 6661 Land Cruiser | 2020 | 50995 | Semi-Auto | 3390 | Diesel | 145 | 30.1 | 2.8 | 4.8 | 27.3 | . 6670 Land Cruiser | 2019 | 54991 | Semi-Auto | 1000 | Diesel | 145 | 30.1 | 2.8 | 4.8 | 27.3 | . 6671 Land Cruiser | 2019 | 47795 | Semi-Auto | 8813 | Diesel | 145 | 30.1 | 2.8 | 4.8 | 27.3 | . 799 RAV4 | 2004 | 5495 | Automatic | 45229 | Petrol | 330 | 30.4 | 2.0 | 4.0 | 27.6 | . 6409 Avensis | 2004 | 3495 | Automatic | 44000 | Petrol | 325 | 30.7 | 2.0 | 4.0 | 27.9 | . 6690 Land Cruiser | 2005 | 8000 | Manual | 80750 | Diesel | 325 | 31.0 | 3.0 | 5.0 | 28.2 | . 6696 Land Cruiser | 2006 | 7240 | Automatic | 113000 | Diesel | 555 | 31.4 | 3.0 | 5.0 | 28.6 | . 761 RAV4 | 2008 | 5195 | Automatic | 61000 | Petrol | 330 | 31.4 | 2.0 | 4.0 | 28.6 | . 6691 Land Cruiser | 2004 | 5975 | Automatic | 160000 | Diesel | 325 | 31.4 | 3.0 | 5.0 | 28.6 | . 6686 Land Cruiser | 2008 | 6950 | Automatic | 174419 | Diesel | 565 | 31.4 | 3.0 | 5.0 | 28.6 | . 785 RAV4 | 2008 | 4480 | Automatic | 116000 | Petrol | 330 | 31.4 | 2.0 | 4.0 | 28.6 | . 776 RAV4 | 2002 | 1600 | Manual | 140000 | Petrol | 325 | 32.1 | 2.0 | 4.0 | 29.3 | . 763 RAV4 | 2005 | 2394 | Manual | 113000 | Petrol | 325 | 32.1 | 2.0 | 4.0 | 29.3 | . 6556 Hilux | 2016 | 19498 | Automatic | 30848 | Diesel | 260 | 32.8 | 3.0 | 5.0 | 30.0 | . 70 GT86 | 2019 | 24990 | Automatic | 4000 | Petrol | 145 | 32.8 | 2.0 | 4.0 | 30.0 | . 6629 Hilux | 2013 | 12000 | Automatic | 92007 | Diesel | 260 | 32.8 | 3.0 | 5.0 | 30.0 | . num = [&#39;mileage&#39;, &#39;tax&#39;, &#39;mpg&#39;, &#39;engineSize&#39;] # num = [&#39;mileage&#39;, &#39;tax&#39;, &#39;mpg&#39;, &#39;engineSize&#39;, &#39;mpg_weighted&#39;] . num = [&#39;mileage&#39;, &#39;tax&#39;, &#39;mpg&#39;, &#39;engineSize&#39;] for i in range(0,len(num),1): x = pd.DataFrame(data[num[0:i+1]]) y = data[&#39;price&#39;] model = linear_model.LinearRegression() model.fit(x, y) model.coef_ . array([-1.47097078e-01, 2.71207473e+00, 3.22056993e+01, 1.18159759e+04]) . for i in range(0,len(num),1): x = pd.DataFrame(data[num[0:i+1]]) y = data[&#39;price&#39;] model = linear_model.LinearRegression() model.fit(x, y, sample_weight = data[&#39;mpg_weighted&#39;]) model.coef_ . array([-1.34164121e-01, 5.10535692e+00, 4.22850836e+01, 1.15948701e+04]) .",
            "url": "https://mdsohelmahmood.github.io/data-science/2022/04/21/Simple-Stepwise-and-Weighted-Regression.html",
            "relUrl": "/2022/04/21/Simple-Stepwise-and-Weighted-Regression.html",
            "date": " • Apr 21, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Title",
            "content": "import pandas as pd import seaborn as sns import matplotlib.pyplot as plt import numpy as np from matplotlib.pyplot import figure . df=pd.read_csv(&#39;listings.csv&#39;) . df.head() . id listing_url scrape_id last_scraped name summary space description experiences_offered neighborhood_overview ... review_scores_value requires_license license jurisdiction_names instant_bookable cancellation_policy require_guest_profile_picture require_guest_phone_verification calculated_host_listings_count reviews_per_month . 0 12147973 | https://www.airbnb.com/rooms/12147973 | 2.016090e+13 | 9/7/2016 | Sunny Bungalow in the City | Cozy, sunny, family home. Master bedroom high... | The house has an open and cozy feel at the sam... | Cozy, sunny, family home. Master bedroom high... | none | Roslindale is quiet, convenient and friendly. ... | ... | NaN | f | NaN | NaN | f | moderate | f | f | 1 | NaN | . 1 3075044 | https://www.airbnb.com/rooms/3075044 | 2.016090e+13 | 9/7/2016 | Charming room in pet friendly apt | Charming and quiet room in a second floor 1910... | Small but cozy and quite room with a full size... | Charming and quiet room in a second floor 1910... | none | The room is in Roslindale, a diverse and prima... | ... | 9.0 | f | NaN | NaN | t | moderate | f | f | 1 | 1.30 | . 2 6976 | https://www.airbnb.com/rooms/6976 | 2.016090e+13 | 9/7/2016 | Mexican Folk Art Haven in Boston | Come stay with a friendly, middle-aged guy in ... | Come stay with a friendly, middle-aged guy in ... | Come stay with a friendly, middle-aged guy in ... | none | The LOCATION: Roslindale is a safe and diverse... | ... | 10.0 | f | NaN | NaN | f | moderate | t | f | 1 | 0.47 | . 3 1436513 | https://www.airbnb.com/rooms/1436513 | 2.016090e+13 | 9/7/2016 | Spacious Sunny Bedroom Suite in Historic Home | Come experience the comforts of home away from... | Most places you find in Boston are small howev... | Come experience the comforts of home away from... | none | Roslindale is a lovely little neighborhood loc... | ... | 10.0 | f | NaN | NaN | f | moderate | f | f | 1 | 1.00 | . 4 7651065 | https://www.airbnb.com/rooms/7651065 | 2.016090e+13 | 9/7/2016 | Come Home to Boston | My comfy, clean and relaxing home is one block... | Clean, attractive, private room, one block fro... | My comfy, clean and relaxing home is one block... | none | I love the proximity to downtown, the neighbor... | ... | 10.0 | f | NaN | NaN | f | flexible | f | f | 1 | 2.25 | . 5 rows × 95 columns . def remove_sign(x,sign): if type(x) is str: x = float(x.replace(sign,&#39;&#39;).replace(&#39;,&#39;,&#39;&#39;)) return x . df[&#39;price&#39;] . 0 $250.00 1 $65.00 2 $65.00 3 $75.00 4 $79.00 ... 3580 $69.00 3581 $150.00 3582 $198.00 3583 $65.00 3584 $65.00 Name: price, Length: 3585, dtype: object . df=df[[&#39;price&#39;,&#39;property_type&#39;]] df=pd.DataFrame(df) figure(figsize=(12, 8), dpi=80) df.price = df.price.apply(remove_sign,sign=&#39;$&#39;) sns.boxplot(y=&#39;price&#39;, x=&#39;property_type&#39;,data=df) plt.xticks(rotation=90) plt.ylabel(&#39;Price ($)&#39;) . Text(0, 0.5, &#39;Price ($)&#39;) . def remove_outlier_IQR(df): Q1=df.quantile(0.25) Q3=df.quantile(0.75) IQR=Q3-Q1 df_final=df[~((df&lt;(Q1-1.5*IQR)) | (df&gt;(Q3+1.5*IQR)))] return df_final . df_outlier_removed=remove_outlier_IQR(df.price) df_outlier_removed=pd.DataFrame(df_outlier_removed) ind_diff=df.index.difference(df_outlier_removed.index) figure(figsize=(12, 8), dpi=80) for i in range(0, len(ind_diff),1): df_final=df.drop([ind_diff[i]]) df=df_final sns.boxplot(y=&#39;price&#39;, x=&#39;property_type&#39;,data=df_final) plt.xticks(rotation=90) plt.ylabel(&#39;Price ($)&#39;) . Text(0, 0.5, &#39;Price ($)&#39;) . def remove_outlier_Hampel(df): med=df.median() List=abs(df-med) cond=List.median()*4.5 good_list=List[~(List&gt;cond)] return good_list . df=pd.read_csv(&#39;listings.csv&#39;) . df.price = df.price.apply(remove_sign,sign=&#39;$&#39;) . df_outlier_removed=remove_outlier_Hampel(df.price) df_outlier_removed=pd.DataFrame(df_outlier_removed) ind_diff=df.index.difference(df_outlier_removed.index) for i in range(0, len(ind_diff),1): df_final=df.drop([ind_diff[i]]) df=df_final sns.boxplot(y=&#39;price&#39;, x=&#39;property_type&#39;,data=df_final) plt.xticks(rotation=90) plt.ylabel(&#39;Price ($)&#39;) . Text(0, 0.5, &#39;Price ($)&#39;) . len(ind_diff) . 95 . from sklearn.cluster import DBSCAN from sklearn.neighbors import NearestNeighbors . def remove_outliers_DBSCAN(df,eps,min_samples): outlier_detection = DBSCAN(eps = eps, min_samples = min_samples) clusters = outlier_detection.fit_predict(df.values.reshape(-1,1)) data = pd.DataFrame() data[&#39;cluster&#39;] = clusters return data[&#39;cluster&#39;] . df=pd.read_csv(&#39;listings.csv&#39;) df.price = df.price.apply(remove_sign,sign=&#39;$&#39;) . clusters=remove_outliers_DBSCAN((df[&#39;price&#39;]),0.5,5) clusters.value_counts().sort_values(ascending=False) . -1 384 9 144 21 117 4 101 0 95 ... 81 6 56 5 82 5 124 5 8 5 Name: cluster, Length: 127, dtype: int64 . plt.plot(clusters) . [&lt;matplotlib.lines.Line2D at 0x282abed7748&gt;] . df_cluster=pd.DataFrame(clusters) ind_outlier=df_cluster.index[df_cluster[&#39;cluster&#39;]==-1] ind_outlier . Int64Index([ 12, 40, 70, 75, 81, 84, 96, 99, 100, 107, ... 3501, 3529, 3532, 3539, 3550, 3552, 3565, 3572, 3576, 3582], dtype=&#39;int64&#39;, length=384) . for i in range(0, len(ind_outlier),1): df_final=df.drop([ind_outlier[i]]) df=df_final sns.boxplot(y=&#39;price&#39;, x=&#39;property_type&#39;,data=df_final) plt.xticks(rotation=90) plt.ylabel(&#39;Price ($)&#39;) . Text(0, 0.5, &#39;Price ($)&#39;) . len(ind_outlier) . 384 . neigh = NearestNeighbors(n_neighbors=3) a=df.price.values.reshape(-1,1) nbrs = neigh.fit(a) distances, indices = nbrs.kneighbors(a) distances = np.sort(distances, axis=0) distances = distances[:,1] plt.plot(distances) . [&lt;matplotlib.lines.Line2D at 0x28297a2c548&gt;] . iris=pd.read_csv(&quot;Iris.csv&quot;) . df=iris[iris[&#39;Species&#39;]==&#39;Iris-virginica&#39;] x=df[&#39;SepalLengthCm&#39;] y=df[&#39;SepalWidthCm&#39;] plt.scatter(x,y) . &lt;matplotlib.collections.PathCollection at 0x282af0ba9c8&gt; . coef = np.polyfit(x,y,1) poly1d_fn = np.poly1d(coef) plt.plot(x,y, &#39;yo&#39;, x, poly1d_fn(x), &#39;--k&#39;) . [&lt;matplotlib.lines.Line2D at 0x282af057f48&gt;, &lt;matplotlib.lines.Line2D at 0x282af02bec8&gt;] . x=x.append(pd.Series([20])) y=y.append(pd.Series([6.08])) . coef . array([0.23161465, 1.44811456]) . 20*0.23189+1.446 . 6.0838 . coef = np.polyfit(x,y,1) poly1d_fn = np.poly1d(coef) plt.plot(x,y, &#39;yo&#39;, x, poly1d_fn(x), &#39;--k&#39;) . [&lt;matplotlib.lines.Line2D at 0x282af0f6bc8&gt;, &lt;matplotlib.lines.Line2D at 0x282af165d08&gt;] .",
            "url": "https://mdsohelmahmood.github.io/data-science/2022/04/19/Practical-implementation-of-outlier-detection-in-python.html",
            "relUrl": "/2022/04/19/Practical-implementation-of-outlier-detection-in-python.html",
            "date": " • Apr 19, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://mdsohelmahmood.github.io/data-science/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://mdsohelmahmood.github.io/data-science/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://mdsohelmahmood.github.io/data-science/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://mdsohelmahmood.github.io/data-science/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}