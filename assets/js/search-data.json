{
  
    
        "post0": {
            "title": "Title",
            "content": "import pandas as pd import seaborn as sns import matplotlib.pyplot as plt import numpy as np from matplotlib.pyplot import figure . df=pd.read_csv(&#39;listings.csv&#39;) . df.head() . id listing_url scrape_id last_scraped name summary space description experiences_offered neighborhood_overview ... review_scores_value requires_license license jurisdiction_names instant_bookable cancellation_policy require_guest_profile_picture require_guest_phone_verification calculated_host_listings_count reviews_per_month . 0 12147973 | https://www.airbnb.com/rooms/12147973 | 2.016090e+13 | 9/7/2016 | Sunny Bungalow in the City | Cozy, sunny, family home. Master bedroom high... | The house has an open and cozy feel at the sam... | Cozy, sunny, family home. Master bedroom high... | none | Roslindale is quiet, convenient and friendly. ... | ... | NaN | f | NaN | NaN | f | moderate | f | f | 1 | NaN | . 1 3075044 | https://www.airbnb.com/rooms/3075044 | 2.016090e+13 | 9/7/2016 | Charming room in pet friendly apt | Charming and quiet room in a second floor 1910... | Small but cozy and quite room with a full size... | Charming and quiet room in a second floor 1910... | none | The room is in Roslindale, a diverse and prima... | ... | 9.0 | f | NaN | NaN | t | moderate | f | f | 1 | 1.30 | . 2 6976 | https://www.airbnb.com/rooms/6976 | 2.016090e+13 | 9/7/2016 | Mexican Folk Art Haven in Boston | Come stay with a friendly, middle-aged guy in ... | Come stay with a friendly, middle-aged guy in ... | Come stay with a friendly, middle-aged guy in ... | none | The LOCATION: Roslindale is a safe and diverse... | ... | 10.0 | f | NaN | NaN | f | moderate | t | f | 1 | 0.47 | . 3 1436513 | https://www.airbnb.com/rooms/1436513 | 2.016090e+13 | 9/7/2016 | Spacious Sunny Bedroom Suite in Historic Home | Come experience the comforts of home away from... | Most places you find in Boston are small howev... | Come experience the comforts of home away from... | none | Roslindale is a lovely little neighborhood loc... | ... | 10.0 | f | NaN | NaN | f | moderate | f | f | 1 | 1.00 | . 4 7651065 | https://www.airbnb.com/rooms/7651065 | 2.016090e+13 | 9/7/2016 | Come Home to Boston | My comfy, clean and relaxing home is one block... | Clean, attractive, private room, one block fro... | My comfy, clean and relaxing home is one block... | none | I love the proximity to downtown, the neighbor... | ... | 10.0 | f | NaN | NaN | f | flexible | f | f | 1 | 2.25 | . 5 rows × 95 columns . def remove_sign(x,sign): if type(x) is str: x = float(x.replace(sign,&#39;&#39;).replace(&#39;,&#39;,&#39;&#39;)) return x . df[&#39;price&#39;] . 0 $250.00 1 $65.00 2 $65.00 3 $75.00 4 $79.00 ... 3580 $69.00 3581 $150.00 3582 $198.00 3583 $65.00 3584 $65.00 Name: price, Length: 3585, dtype: object . df=df[[&#39;price&#39;,&#39;property_type&#39;]] df=pd.DataFrame(df) figure(figsize=(12, 8), dpi=80) df.price = df.price.apply(remove_sign,sign=&#39;$&#39;) sns.boxplot(y=&#39;price&#39;, x=&#39;property_type&#39;,data=df) plt.xticks(rotation=90) plt.ylabel(&#39;Price ($)&#39;) . Text(0, 0.5, &#39;Price ($)&#39;) . def remove_outlier_IQR(df): Q1=df.quantile(0.25) Q3=df.quantile(0.75) IQR=Q3-Q1 df_final=df[~((df&lt;(Q1-1.5*IQR)) | (df&gt;(Q3+1.5*IQR)))] return df_final . df_outlier_removed=remove_outlier_IQR(df.price) df_outlier_removed=pd.DataFrame(df_outlier_removed) ind_diff=df.index.difference(df_outlier_removed.index) figure(figsize=(12, 8), dpi=80) for i in range(0, len(ind_diff),1): df_final=df.drop([ind_diff[i]]) df=df_final sns.boxplot(y=&#39;price&#39;, x=&#39;property_type&#39;,data=df_final) plt.xticks(rotation=90) plt.ylabel(&#39;Price ($)&#39;) . Text(0, 0.5, &#39;Price ($)&#39;) . def remove_outlier_Hampel(df): med=df.median() List=abs(df-med) cond=List.median()*4.5 good_list=List[~(List&gt;cond)] return good_list . df=pd.read_csv(&#39;listings.csv&#39;) . df.price = df.price.apply(remove_sign,sign=&#39;$&#39;) . df_outlier_removed=remove_outlier_Hampel(df.price) df_outlier_removed=pd.DataFrame(df_outlier_removed) ind_diff=df.index.difference(df_outlier_removed.index) for i in range(0, len(ind_diff),1): df_final=df.drop([ind_diff[i]]) df=df_final sns.boxplot(y=&#39;price&#39;, x=&#39;property_type&#39;,data=df_final) plt.xticks(rotation=90) plt.ylabel(&#39;Price ($)&#39;) . Text(0, 0.5, &#39;Price ($)&#39;) . len(ind_diff) . 95 . from sklearn.cluster import DBSCAN from sklearn.neighbors import NearestNeighbors . def remove_outliers_DBSCAN(df,eps,min_samples): outlier_detection = DBSCAN(eps = eps, min_samples = min_samples) clusters = outlier_detection.fit_predict(df.values.reshape(-1,1)) data = pd.DataFrame() data[&#39;cluster&#39;] = clusters return data[&#39;cluster&#39;] . df=pd.read_csv(&#39;listings.csv&#39;) df.price = df.price.apply(remove_sign,sign=&#39;$&#39;) . clusters=remove_outliers_DBSCAN((df[&#39;price&#39;]),0.5,5) clusters.value_counts().sort_values(ascending=False) . -1 384 9 144 21 117 4 101 0 95 ... 81 6 56 5 82 5 124 5 8 5 Name: cluster, Length: 127, dtype: int64 . plt.plot(clusters) . [&lt;matplotlib.lines.Line2D at 0x282abed7748&gt;] . df_cluster=pd.DataFrame(clusters) ind_outlier=df_cluster.index[df_cluster[&#39;cluster&#39;]==-1] ind_outlier . Int64Index([ 12, 40, 70, 75, 81, 84, 96, 99, 100, 107, ... 3501, 3529, 3532, 3539, 3550, 3552, 3565, 3572, 3576, 3582], dtype=&#39;int64&#39;, length=384) . for i in range(0, len(ind_outlier),1): df_final=df.drop([ind_outlier[i]]) df=df_final sns.boxplot(y=&#39;price&#39;, x=&#39;property_type&#39;,data=df_final) plt.xticks(rotation=90) plt.ylabel(&#39;Price ($)&#39;) . Text(0, 0.5, &#39;Price ($)&#39;) . len(ind_outlier) . 384 . neigh = NearestNeighbors(n_neighbors=3) a=df.price.values.reshape(-1,1) nbrs = neigh.fit(a) distances, indices = nbrs.kneighbors(a) distances = np.sort(distances, axis=0) distances = distances[:,1] plt.plot(distances) . [&lt;matplotlib.lines.Line2D at 0x28297a2c548&gt;] . iris=pd.read_csv(&quot;Iris.csv&quot;) . df=iris[iris[&#39;Species&#39;]==&#39;Iris-virginica&#39;] x=df[&#39;SepalLengthCm&#39;] y=df[&#39;SepalWidthCm&#39;] plt.scatter(x,y) . &lt;matplotlib.collections.PathCollection at 0x282af0ba9c8&gt; . coef = np.polyfit(x,y,1) poly1d_fn = np.poly1d(coef) plt.plot(x,y, &#39;yo&#39;, x, poly1d_fn(x), &#39;--k&#39;) . [&lt;matplotlib.lines.Line2D at 0x282af057f48&gt;, &lt;matplotlib.lines.Line2D at 0x282af02bec8&gt;] . x=x.append(pd.Series([20])) y=y.append(pd.Series([6.08])) . coef . array([0.23161465, 1.44811456]) . 20*0.23189+1.446 . 6.0838 . coef = np.polyfit(x,y,1) poly1d_fn = np.poly1d(coef) plt.plot(x,y, &#39;yo&#39;, x, poly1d_fn(x), &#39;--k&#39;) . [&lt;matplotlib.lines.Line2D at 0x282af0f6bc8&gt;, &lt;matplotlib.lines.Line2D at 0x282af165d08&gt;] .",
            "url": "https://mdsohelmahmood.github.io/data-science/2022/04/19/Practical-implementation-of-outlier-detection-in-python.html",
            "relUrl": "/2022/04/19/Practical-implementation-of-outlier-detection-in-python.html",
            "date": " • Apr 19, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://mdsohelmahmood.github.io/data-science/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://mdsohelmahmood.github.io/data-science/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://mdsohelmahmood.github.io/data-science/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://mdsohelmahmood.github.io/data-science/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}